Total: 28 samples
      26  92.9%  92.9%       26  92.9% spin
       1   3.6%  96.4%        2   7.1% SortedList_insert
       1   3.6% 100.0%        1   3.6% __strcmp_sse42
       0   0.0% 100.0%       28 100.0% __clone
       0   0.0% 100.0%       28 100.0% start_thread
       0   0.0% 100.0%       28 100.0% thread_func
ROUTINE ====================== thread_func in /u/eng/ugrad/ericax/lab2b/lab2_list.c
     0     28 Total samples (flat / cumulative)
     .      .   55: 
     .      .   56: void release() {
     .      .   57:     __sync_lock_release(&spin_lock); 
     .      .   58: }
     .      .   59: 
---
     .      .   60: void *thread_func(void *input) {
     .      .   61: 
     .      .   62:     int tid = *(int *)input; 
     .      .   63:     int tnum = t; 
     .      .   64:     int knum = num_keys; 
     .      .   65:     int n = 0; 
     .      .   66:     int len = 0; 
     .      .   67:     SortedListElement_t *temp; 
     .      .   68: 
     .      .   69:     if(m) {
     .      .   70:         pthread_mutex_lock(&lock);
     .      .   71:     }  
     .      .   72:     if(s) {
     .     26   73:         spin();
     .      .   74:     } 
     .      .   75: 
     .      .   76:     //insert each element into the list 
     .      .   77:     for(n = tid; n < knum; n += tnum) {  
     .      2   78:         SortedList_insert(list, &elements[n]); 
     .      .   79:     }
     .      .   80: 
     .      .   81:     //find length of list 
     .      .   82:     len = SortedList_length(list); 
     .      .   83:     if(len == -1) {
     .      .   84:         fprintf(stderr, "Length function found corruption\n");
     .      .   85:         exit(2); 
     .      .   86:     }  
     .      .   87: 
     .      .   88:     //lookup & delete each element from the list 
     .      .   89:     for(n = tid; n < knum; n += tnum) {
     .      .   90:         temp = SortedList_lookup(list, elements[n].key); 
     .      .   91:         if(temp == NULL) {
     .      .   92:             fprintf(stderr, "Key not found\n");
     .      .   93:             exit(2); 
     .      .   94:         }
     .      .   95:         if(SortedList_delete(temp) == 1) { //free on this side? 
     .      .   96:             fprintf(stderr, "Delete function found corruption\n");
     .      .   97:             exit(2); 
     .      .   98:         }    
     .      .   99:     }
     .      .  100: 
     .      .  101:     if(m) {
     .      .  102:         pthread_mutex_unlock(&lock);
     .      .  103:     }  
     .      .  104:     if(s) {
     .      .  105:         release(); 
     .      .  106:     } 
     .      .  107: 
     .      .  108:     return NULL; 
     .      .  109: }
---
     .      .  110: 
     .      .  111: int main(int argc, char **argv) {
     .      .  112: 
     .      .  113:     signal(SIGSEGV, handler);
     .      .  114: 
ROUTINE ====================== thread_func in /u/eng/ugrad/ericax/lab2b/lab2_list.c
     0     28 Total samples (flat / cumulative)
     .      .   55: 
     .      .   56: void release() {
     .      .   57:     __sync_lock_release(&spin_lock); 
     .      .   58: }
     .      .   59: 
---
     .      .   60: void *thread_func(void *input) {
     .      .   61: 
     .      .   62:     int tid = *(int *)input; 
     .      .   63:     int tnum = t; 
     .      .   64:     int knum = num_keys; 
     .      .   65:     int n = 0; 
     .      .   66:     int len = 0; 
     .      .   67:     SortedListElement_t *temp; 
     .      .   68: 
     .      .   69:     if(m) {
     .      .   70:         pthread_mutex_lock(&lock);
     .      .   71:     }  
     .      .   72:     if(s) {
     .     26   73:         spin();
     .      .   74:     } 
     .      .   75: 
     .      .   76:     //insert each element into the list 
     .      .   77:     for(n = tid; n < knum; n += tnum) {  
     .      2   78:         SortedList_insert(list, &elements[n]); 
     .      .   79:     }
     .      .   80: 
     .      .   81:     //find length of list 
     .      .   82:     len = SortedList_length(list); 
     .      .   83:     if(len == -1) {
     .      .   84:         fprintf(stderr, "Length function found corruption\n");
     .      .   85:         exit(2); 
     .      .   86:     }  
     .      .   87: 
     .      .   88:     //lookup & delete each element from the list 
     .      .   89:     for(n = tid; n < knum; n += tnum) {
     .      .   90:         temp = SortedList_lookup(list, elements[n].key); 
     .      .   91:         if(temp == NULL) {
     .      .   92:             fprintf(stderr, "Key not found\n");
     .      .   93:             exit(2); 
     .      .   94:         }
     .      .   95:         if(SortedList_delete(temp) == 1) { //free on this side? 
     .      .   96:             fprintf(stderr, "Delete function found corruption\n");
     .      .   97:             exit(2); 
     .      .   98:         }    
     .      .   99:     }
     .      .  100: 
     .      .  101:     if(m) {
     .      .  102:         pthread_mutex_unlock(&lock);
     .      .  103:     }  
     .      .  104:     if(s) {
     .      .  105:         release(); 
     .      .  106:     } 
     .      .  107: 
     .      .  108:     return NULL; 
     .      .  109: }
---
     .      .  110: 
     .      .  111: int main(int argc, char **argv) {
     .      .  112: 
     .      .  113:     signal(SIGSEGV, handler);
     .      .  114: 
